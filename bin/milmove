#!/bin/bash

# shellcheck disable=SC2153
if [[ -z "${MILMOVE_PR}" ]]; then
    echo "Missing MILMOVE_PR" >&2
    exit 2
fi

if [[ -z "${AWS_REGION}" ]]; then
    echo "Missing AWS_REGION" >&2
    exit 2
fi

set -euo pipefail

# install dependencies
yarn

eph_dir=${PWD}

# create a directory for our work
rm -rf milmove_pr && mkdir milmove_pr && cd milmove_pr

# checkout the original repo with depth 1 to maybe transfer less data
git clone --depth 1 https://github.com/transcom/mymove.git
cd mymove
# fetch the PR branch to pr_branch
git fetch origin "pull/${MILMOVE_PR}/head":pr_branch
git checkout pr_branch

# set some milmove build environment variables before we muck with things
export GIT_BRANCH="pr/${MILMOVE_PR}"
GIT_COMMIT=$(git rev-list -1 HEAD)
export GIT_COMMIT

# add our private repo with our custom changes
git remote add truss https://github.com/trussworks/mymove.git
# fetch the branch with the mods needed for an ephemeral app
git fetch truss adh-ephemeral-review
# apply the commit with the changes. If this fails, the build will
# fail and we can't start the app
git cherry-pick 8c647b1dc --no-commit

# HACK: set some environment variables from .envrc
# could install direnv in AWS build env, but this is less work right
# now

export MYMOVE_DIR=$PWD

# Sets the environment for the server
export ENVIRONMENT=development

# Sets the application for migrations, options are 'app' or 'orders'
export APPLICATION=app

# Migration Path
export MIGRATION_PATH="file://${MYMOVE_DIR}/migrations/app/schema;file://${MYMOVE_DIR}/migrations/app/secure"
export MIGRATION_MANIFEST="${MYMOVE_DIR}/migrations/app/migrations_manifest.txt"

# Default DB configuration
export DB_PASSWORD=mysecretpassword
export DB_PASSWORD_LOW_PRIV=mysecretpassword
export PGPASSWORD=$DB_PASSWORD
export DB_USER=postgres
export DB_USER_LOW_PRIV=crud
export DB_HOST=localhost
export DB_PORT=5432
export DB_PORT_DEPLOYED_MIGRATIONS=5434
export DB_PORT_TEST=5433
export DB_NAME=dev_db
export DB_NAME_DEV=dev_db
export DB_NAME_DEPLOYED_MIGRATIONS=deployed_migrations
export DB_NAME_TEST=test_db
export DB_RETRY_INTERVAL=5s
export DB_SSL_MODE=disable

# Login.gov configuration
export LOGIN_GOV_CALLBACK_PROTOCOL="http"
export LOGIN_GOV_CALLBACK_PORT="3000"
export LOGIN_GOV_MY_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:mymovemillocal"
export LOGIN_GOV_OFFICE_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:officemovemillocal"
export LOGIN_GOV_ADMIN_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:adminmovemillocal"
export LOGIN_GOV_ENGADMIN_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:engadminmovemillocal"
export LOGIN_GOV_HOSTNAME="idp.int.identitysandbox.gov"

# JSON Web Token (JWT) config
CLIENT_AUTH_SECRET_KEY=$(cat config/tls/devlocal-client_auth_secret.key)
export CLIENT_AUTH_SECRET_KEY

# Path to PEM-encoded CA certificate used to sign testing and development certificates
# This CA is not trusted in production!
export DEVLOCAL_CA="${MYMOVE_DIR}/config/tls/devlocal-ca.pem"
export DEVLOCAL_AUTH=true

# Path to PKCS#7 package containing certificates of all DoD root and
# intermediate CAs, so that we can both validate the server certs of other DoD
# entities like GEX and DMDC, as well as validate the client certs of other DoD
# entities when they connect to us
export DOD_CA_PACKAGE="${MYMOVE_DIR}/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b"

# MyMove client certificate
# All of our DoD-signed certs are currently signed by DOD SW CA-54
# This cannot be changed unless our certs are all resigned
MOVE_MIL_DOD_CA_CERT=$(cat "${MYMOVE_DIR}"/config/tls/dod-sw-ca-54.pem)
export MOVE_MIL_DOD_CA_CERT

# HERE MAPS API
export HERE_MAPS_GEOCODE_ENDPOINT="https://geocoder.api.here.com/6.2/geocode.json"
export HERE_MAPS_ROUTING_ENDPOINT="https://route.api.here.com/routing/7.2/calculateroute.json"

# GEX integration config
export GEX_BASIC_AUTH_USERNAME="mymovet"

export DPS_COOKIE_EXPIRES_IN_MINUTES="240"
export HTTP_SDDC_PROTOCOL="http"
export HTTP_SDDC_PORT="8080"
export DPS_REDIRECT_URL="https://dpstest.sddc.army.mil/cust"
export DPS_COOKIE_NAME="DPSIVV"

# DMDC Identity Web Services Real-Time Broker Service
# To test against DMDC IWS RBS modify IWS_RBS_ENABLED and set to 1 in your .envrc.local
# It is disabled by default so that no requests are sent to DMDC during development unless explicitly set
export IWS_RBS_ENABLED=0
export IWS_RBS_HOST="pkict.dmdc.osd.mil"

# Always show Swagger UI in development
export SERVE_SWAGGER_UI=true

# Listeners
export NO_TLS_ENABLED=1 # primary development listener
export MUTUAL_TLS_ENABLED=1 # used for orders and prime testing
export TLS_ENABLED=false # not used in development

# Set ports - Changed from defaults so as not to conflict with transcom/mymove
export GIN_PORT=9001
export NO_TLS_PORT=8080
export TLS_PORT=8443
export MUTUAL_TLS_PORT=9443

# Services
export SERVE_ADMIN=true
export SERVE_SDDC=true
export SERVE_ORDERS=true
export SERVE_DPS=true
export SERVE_API_INTERNAL=true
export SERVE_API_GHC=true
export SERVE_API_PRIME=true
export SERVE_API_SUPPORT=true

# Set feature flags
export FEATURE_FLAG_ACCESS_CODE=false
export FEATURE_FLAG_SUPPORT_ENDPOINTS=true


# HACK: envrc.local config

LOGIN_GOV_SECRET_KEY=$(cat config/tls/devlocal-mtls.key)
export LOGIN_GOV_SECRET_KEY
MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-mtls.cer)
export MOVE_MIL_DOD_TLS_CERT
MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-mtls.key)
export MOVE_MIL_DOD_TLS_KEY
export HERE_MAPS_APP_ID=replace
export HERE_MAPS_APP_CODE=replace
export GEX_BASIC_AUTH_PASSWORD=replace
export DPS_AUTH_SECRET_KEY=12345678901234567890123456789012
export DPS_AUTH_COOKIE_SECRET_KEY=12345678901234567890123456789012
export CSRF_AUTH_KEY=3132333435363738393031323334353637383930313233343536373839303132
export EIA_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
export CLOUD_FRONT_PRIVATE_KEY=replace
export CLOUD_FRONT_KEY_ID=replace

# HACK: hardcode milmove AWS info

ECR_BASE=004351505091.dkr.ecr.us-west-2.amazonaws.com/milmove-docker-ecs

export ENV_NAME=milmove-pr-${MILMOVE_PR}

MILMOVE_MIGRATE_ECR=${ECR_BASE}/app-migrations
export MILMOVE_MIGRATE_IMG=${MILMOVE_MIGRATE_ECR}:${ENV_NAME}
MILMOVE_ECR=${ECR_BASE}/app
export MILMOVE_IMG=${MILMOVE_ECR}:${ENV_NAME}

echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
aws ecr get-login-password --region "${AWS_REGION}" |
    docker login --username AWS --password-stdin "${MILMOVE_ECR}"

docker build -t "${MILMOVE_IMG}" \
       --build-arg "GIT_BRANCH=${GIT_BRANCH}" \
       --build-arg "GIT_COMMIT=${GIT_COMMIT}" \
       -f Dockerfile.reviewapp .
docker build -t "${MILMOVE_MIGRATE_IMG}" \
       --build-arg "GIT_BRANCH=${GIT_BRANCH}" \
       --build-arg "GIT_COMMIT=${GIT_COMMIT}" \
       --target migrate \
       -f Dockerfile.reviewapp .

docker push "${MILMOVE_IMG}"
docker push "${MILMOVE_MIGRATE_IMG}"

export REVIEW_BASE_DOMAIN=${ENV_NAME}.mymove.sandbox.truss.coffee

export ECS_CLI_DEPLOY_DIR="${PWD}"

cd "${eph_dir}"
./node_modules/.bin/ts-node -P tsconfig.bin.json bin/milmove-eph.ts
