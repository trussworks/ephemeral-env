#!/bin/bash

if [[ -z "${ACTION}" ]]; then
    echo "Missing ACTION" >&2
    exit 2
fi

if [[ -z "${AWS_REGION}" ]]; then
    echo "Missing AWS_REGION" >&2
    exit 2
fi

set -euo pipefail

# install dependencies
yarn

eph_dir=${PWD}

function do_build() {

    if [[ -z "${PR}" ]]; then
        echo "Missing PR" >&2
        exit 2
    fi

    # create a directory for our work
    rm -rf milmove_pr && mkdir milmove_pr && cd milmove_pr

    # checkout the original repo with depth 1 to maybe transfer less data
    git clone https://github.com/transcom/mymove.git
    cd mymove
    # fetch the PR branch to pr_branch
    git fetch origin "pull/${PR}/head":pr_branch
    git checkout pr_branch

    # set some milmove build environment variables before we muck with things
    export GIT_BRANCH="pr/${PR}"
    GIT_COMMIT=$(git rev-list -1 HEAD)
    export GIT_COMMIT

    # HACK: set some environment variables from .envrc
    # could install direnv in AWS build env, but this is less work right
    # now

    export MYMOVE_DIR=$PWD

    # Login.gov configuration
    export LOGIN_GOV_CALLBACK_PROTOCOL="http"
    export LOGIN_GOV_MY_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:mymovemillocal"
    export LOGIN_GOV_OFFICE_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:officemovemillocal"
    export LOGIN_GOV_ADMIN_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:adminmovemillocal"
    export LOGIN_GOV_ENGADMIN_CLIENT_ID="urn:gov:gsa:openidconnect.profiles:sp:sso:dod:engadminmovemillocal"
    export LOGIN_GOV_HOSTNAME="idp.int.identitysandbox.gov"

    # JSON Web Token (JWT) config
    CLIENT_AUTH_SECRET_KEY=$(cat config/tls/devlocal-client_auth_secret.key)
    export CLIENT_AUTH_SECRET_KEY

    # MyMove client certificate
    # All of our DoD-signed certs are currently signed by DOD SW CA-54
    # This cannot be changed unless our certs are all resigned
    MOVE_MIL_DOD_CA_CERT=$(cat "${MYMOVE_DIR}"/config/tls/dod-sw-ca-54.pem)
    export MOVE_MIL_DOD_CA_CERT

    # HERE MAPS API
    export HERE_MAPS_GEOCODE_ENDPOINT="https://geocoder.api.here.com/6.2/geocode.json"
    export HERE_MAPS_ROUTING_ENDPOINT="https://route.api.here.com/routing/7.2/calculateroute.json"

    export DPS_COOKIE_EXPIRES_IN_MINUTES="240"

    # DMDC Identity Web Services Real-Time Broker Service To test
    # against DMDC IWS RBS modify IWS_RBS_ENABLED and set to 1 in your
    # .envrc.local It is disabled by default so that no requests are
    # sent to DMDC during development unless explicitly set
    export IWS_RBS_ENABLED=0
    export IWS_RBS_HOST="pkict.dmdc.osd.mil"

    # Services
    export SERVE_SDDC=true
    export SERVE_ORDERS=true
    export SERVE_DPS=true
    export SERVE_API_INTERNAL=true
    export SERVE_API_SUPPORT=true

    # HACK: envrc.local config

    LOGIN_GOV_SECRET_KEY=$(cat config/tls/devlocal-mtls.key)
    export LOGIN_GOV_SECRET_KEY
    MOVE_MIL_DOD_TLS_CERT=$(cat config/tls/devlocal-mtls.cer)
    export MOVE_MIL_DOD_TLS_CERT
    MOVE_MIL_DOD_TLS_KEY=$(cat config/tls/devlocal-mtls.key)
    export MOVE_MIL_DOD_TLS_KEY
    export HERE_MAPS_APP_ID=replace
    export HERE_MAPS_APP_CODE=replace
    export GEX_BASIC_AUTH_PASSWORD=replace
    export DPS_AUTH_SECRET_KEY=12345678901234567890123456789012
    export DPS_AUTH_COOKIE_SECRET_KEY=12345678901234567890123456789012
    export CSRF_AUTH_KEY=3132333435363738393031323334353637383930313233343536373839303132
    export EIA_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    export CLOUD_FRONT_PRIVATE_KEY=replace
    export CLOUD_FRONT_KEY_ID=replace

    export LOGGING_ENV=production

    # HACK: hardcode milmove AWS info

    ECR_BASE=004351505091.dkr.ecr.us-west-2.amazonaws.com/milmove-docker-ecs

    export ENV_NAME=milmove-pr-${PR}

    MILMOVE_MIGRATE_ECR=${ECR_BASE}/app-migrations
    export MILMOVE_MIGRATE_IMG=${MILMOVE_MIGRATE_ECR}:${ENV_NAME}
    MILMOVE_ECR=${ECR_BASE}/app
    export MILMOVE_IMG=${MILMOVE_ECR}:${ENV_NAME}

    echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
    aws ecr get-login-password --region "${AWS_REGION}" |
        docker login --username AWS --password-stdin "${MILMOVE_ECR}"

    docker build -t "${MILMOVE_IMG}" \
           --build-arg "GIT_BRANCH=${GIT_BRANCH}" \
           --build-arg "GIT_COMMIT=${GIT_COMMIT}" \
           --target milmove \
           -f Dockerfile.reviewapp .
    docker build -t "${MILMOVE_MIGRATE_IMG}" \
           --build-arg "GIT_BRANCH=${GIT_BRANCH}" \
           --build-arg "GIT_COMMIT=${GIT_COMMIT}" \
           --target migrate \
           -f Dockerfile.reviewapp .

    docker push "${MILMOVE_IMG}"
    docker push "${MILMOVE_MIGRATE_IMG}"

    # TODO: this is duplicated in the ephemeral config
    export REVIEW_BASE_DOMAIN=${ENV_NAME}.mymove.sandbox.truss.coffee

    export ECS_CLI_DEPLOY_DIR="${PWD}"

    cd "${eph_dir}"
    exec ./node_modules/.bin/ts-node -P tsconfig.bin.json bin/milmove-eph.ts
}

function do_teardown() {
    cd "${eph_dir}"
    exec ./node_modules/.bin/ts-node -P tsconfig.bin.json bin/milmove-eph-teardown.ts
}

case ${ACTION} in
    build)
        do_build
        ;;
    teardown)
        do_teardown
        ;;
    *)
        echo "Unknown ACTION: '${ACTION}' > &2"
        exit 1
        ;;
esac
